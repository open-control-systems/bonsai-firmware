name: ESP32

on:
  pull_request:
  push:
    branches:
      - master
    tags:
      - '*'

jobs:
  build-firmware:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project:
          - name: "bonsai-growlab"
            config: ".env/bonsai_growlab_configuration"

          - name: "bonsai-zero-ar-1"
            config: ".env/bonsai_zero_ar_1"

          - name: "bonsai-zero-a-1"
            config: ".env/bonsai_zero_a_1"
    env:
      SOURCE_PATH: project
      IDF_PATH: esp-idf
      IDF_VERSION: v5.3.1
      CONFIGURATION_PATH_CCACHE: .env/ccache
    steps:
      - name: checkout repository
        uses: actions/checkout@v4
        with:
          path: ${{ env.SOURCE_PATH }}
          submodules: recursive

      - name: install yq
        shell: bash
        run: |
          VERSION=v4.2.0
          BINARY=yq_linux_amd64
          wget https://github.com/mikefarah/yq/releases/download/${VERSION}/${BINARY}.tar.gz -O - | \
          tar xz && sudo mv ${BINARY} /usr/bin/yq

      - name: setup node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: setup ESP32 environment
        uses: ./project/control-components/.github/actions/esp32/env
        with:
          IDF_PATH: ${{ env.IDF_PATH }}
          IDF_VERSION: ${{ env.IDF_VERSION }}

      - name: setup system environment
        uses: ./project/control-components/.github/actions/system/env

      - name: setup ccache
        uses: ./project/control-components/.github/actions/system/ccache
        with:
          CONFIGURATION_PATH_CCACHE: ${{ env.CONFIGURATION_PATH_CCACHE }}

      - name: format firmware build version
        id: version_formatter
        uses: ./project/control-components/.github/actions/core/version

      - name: check formatting
        uses: ./project/control-components/.github/actions/core/fmt
        with:
          PROJECT_PATH: ${{ env.SOURCE_PATH }}/projects/${{ matrix.project.name }}
          CONTROL_COMPONENTS_PATH: ${{ env.SOURCE_PATH }}/control-components

      - name: prepare configuration
        shell: bash
        run: |
          PROJECT_NAME="${{ matrix.project.name }}"
          CONFIG_PATH="${{ matrix.project.config }}"
          CONFIG_FILE="${{ env.SOURCE_PATH }}/projects/config.yml"

          # Read the project-specific config from YAML and append to the config file
          if yq eval ".projects[\"$PROJECT_NAME\"].config" "$CONFIG_FILE" | grep -qv "null"; then
            yq eval ".projects[\"$PROJECT_NAME\"].config[]" "$CONFIG_FILE" | while read -r line; do
              [ -n "$line" ] && echo "$line" >> "$CONFIG_PATH"
            done
          fi

          # Read the firmware description from YAML
          FW_DESCRIPTION=$(yq eval ".projects[\"$PROJECT_NAME\"].desc" "$CONFIG_FILE")

          # Append general firmware metadata
          echo "CONFIG_OCS_CORE_FW_VERSION=\"${{ steps.version_formatter.outputs.build_version }}\"" >> "$CONFIG_PATH"
          echo "CONFIG_OCS_CORE_FW_NAME=\"$PROJECT_NAME\"" >> "$CONFIG_PATH"
          echo "CONFIG_OCS_CORE_FW_DESCRIPTION=\"$FW_DESCRIPTION\"" >> "$CONFIG_PATH"

      - name: build web gUI
        shell: bash
        run: |
          cd ${{ env.SOURCE_PATH }}/projects/${{ matrix.project.name }}/web-gui
          npm install
          npm run build
          npm run fmt
          if [ -n "$(git status --porcelain .)" ]; then
            echo "Please run 'npm run fmt' and commit the updated files."
            exit 1
          fi

      - name: build firmware
        uses: ./project/control-components/.github/actions/esp32/project
        with:
          IDF_PATH: ${{ env.IDF_PATH }}
          PROJECT_PATH: ${{ env.SOURCE_PATH }}/projects/${{ matrix.project.name }}
          CONFIGURATION_PATH_CCACHE: ${{ env.CONFIGURATION_PATH_CCACHE }}
          CONFIGURATION_PATH_PROJECT: ${{ matrix.project.config }}

      - name: upload firmware
        uses: ./project/control-components/.github/actions/esp32/upload
        with:
          PROJECT_PATH: ${{ env.SOURCE_PATH }}/projects/${{ matrix.project.name }}
          PROJECT_ID: ${{ matrix.project.name }}
